sudo apt update
sudo apt install flex bison gcc

bison -d parser.y        # Generates parser.tab.c and parser.tab.h
flex scanner.l           # Generates lex.yy.c
gcc parser.tab.c lex.yy.c -o myparser -lfl   # Compile all together

./myparser input.txt


IMPLEMENT PARSER FOR AN EXPRESSION GRAMMER USING YACC AND LEX
%{
#include "expression.tab.h"
#include <stdlib.h>

extern int yylval;
%}

%%

[0-9]+          { yylval = atoi(yytext); return NUMBER; }
[ \t\r\n]+      ;  // Ignore whitespace
"+"             { return '+'; }
"-"             { return '-'; }
"*"             { return '*'; }
"/"             { return '/'; }
"("             { return '('; }
")"             { return ')'; }

.               { return yytext[0]; }

%%

int yywrap() {
    return 1;
}
YACC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%{
#include <stdio.h>
#include <stdlib.h>

void yyerror(const char *s);
int yylex();
extern FILE *yyin;
%}

%token NUMBER

%%

input:
    expr '\n'      { printf("Result = %d\n", $1); }
  | expr           { printf("Result = %d\n", $1); }
  ;

expr:
    expr '+' expr  { $$ = $1 + $3; }
  | expr '-' expr  { $$ = $1 - $3; }
  | expr '*' expr  { $$ = $1 * $3; }
  | expr '/' expr  {
        if ($3 == 0) {
            yyerror("Division by zero");
            exit(1);
        }
        $$ = $1 / $3;
    }
  | '(' expr ')'   { $$ = $2; }
  | NUMBER         { $$ = $1; }
  ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main(int argc, char *argv[]) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("Error opening file");
            return 1;
        }
        yyin = file;
    }

    printf("Evaluating expression from file:\n");
    yyparse();
    return 0;
}
INPUT FILE
(3 + 5) * 2 

RUNNING AMD
//bison -d expression.y
//flex expression.l
//gcc lex.yy.c expression.tab.c -o expression.exe
//expression.exe expressionIO.txt
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
===============SWITCH==================
bison -d switch.y
flex -o switch.l
gcc switch.tab.c lex.yy.c -o parser.exe

%{
#include "switch.tab.h"
#include <stdio.h>
%}

%option noyywrap

%%

[ \t\r\n]+              ;   /* Skip whitespace */
"switch"                { return SWITCH; }
"case"                  { return CASE; }
"default"               { return DEFAULT; }
"{"                     { return LBRACE; }
"}"                     { return RBRACE; }
":"                     { return COLON; }
";"                     { return SEMICOLON; }
"="                     { return ASSIGN; }
"+"                     { return ADD; }
"-"                     { return SUB; }
"*"                     { return MUL; }
"/"                     { return DIV; }
"("                     { return LPAREN; }
")"                     { return RPAREN; }
[0-9]+                  { return NUMBER; }
[a-zA-Z_][a-zA-Z0-9_]*  { return ID; }

.                       { fprintf(stderr, "Unknown char: %s\n", yytext); exit(1); }

%%
YACC++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%{
#include <stdio.h>
#include <stdlib.h>

int yylex(void);
void yyerror(const char *msg);
%}

%token SWITCH CASE DEFAULT LBRACE RBRACE COLON SEMICOLON NUMBER ID
%token LPAREN RPAREN ASSIGN ADD SUB MUL DIV
%left ADD SUB
%left MUL DIV

%%

program:
      switch_stmt       { printf("Valid switch-case syntax\n"); }
    ;

switch_stmt:
      SWITCH LPAREN condition RPAREN LBRACE case_list default_case_opt RBRACE
    ;

condition:
      NUMBER
    | ID
    ;

case_list:
      case_list case_stmt
    | case_stmt
    ;

case_stmt:
      CASE NUMBER COLON stmt_list
    ;

default_case_opt:
      /* empty */
    | DEFAULT COLON stmt_list
    ;

stmt_list:
      stmt_list statement
    | statement
    ;

statement:
      ID ASSIGN expression SEMICOLON
    | expression SEMICOLON
    ;

expression:
      ID
    | NUMBER
    | expression ADD expression
    | expression SUB expression
    | expression MUL expression
    | expression DIV expression
    ;

%%

void yyerror(const char *msg) {
    fprintf(stderr, "Parsing error: %s\n", msg);
}

int main() {
    return yyparse();
}
-----------------------------------------------------------------------------------------------------------------------------------------------
====================SQL YACC====================
%{
#include <stdio.h>
#include <stdlib.h>
void yyerror(const char *s);
int yylex(void);
FILE *yyin;
%}

%union {
    char *str;
}

%token <str> IDENTIFIER NUMBER STRING
%token SELECT FROM WHERE AND OR STAR COMMA EQ LT GT LE GE NEQ LPAREN RPAREN SEMICOLON INVALID

%nonassoc LOWER_THAN_WHERE
%left OR
%left AND
%nonassoc EQ LT GT LE GE NEQ

%start statement

%%

statement:
    SELECT select_list FROM table_list opt_where_clause SEMICOLON
        { printf("Valid SELECT statement.\n"); }
;

select_list:
    STAR
  | column_list
;

column_list:
    column_list COMMA IDENTIFIER
  | IDENTIFIER
;

table_list:
    table_list COMMA IDENTIFIER
  | IDENTIFIER
;

opt_where_clause:
    /* empty */
  | WHERE condition
;

condition:
    IDENTIFIER comparison_op value
  | LPAREN condition RPAREN
  | condition AND condition
  | condition OR condition
;

comparison_op:
    EQ
  | LT
  | GT
  | LE
  | GE
  | NEQ
;

value:
    IDENTIFIER
  | NUMBER
  | STRING
;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Syntax error: %s\n", s);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <input-file>\n", argv[0]);
        return 1;
    }

    FILE *fp = fopen(argv[1], "r");
    if (!fp) {
        perror("Error opening file");
        return 1;
    }

    yyin = fp;
    int result = yyparse();
    fclose(fp);
    return result;
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%{
#include "sqlyacc.tab.h"
#include <string.h>
%}

DIGIT      [0-9]
ID         [a-zA-Z_][a-zA-Z0-9_]*
WS         [ \t\r\n]+

%%

"SELECT"           { return SELECT; }
"FROM"             { return FROM; }
"WHERE"            { return WHERE; }
"AND"              { return AND; }
"OR"               { return OR; }
"*"                { return STAR; }
","                { return COMMA; }
";"                { return SEMICOLON; }
"="                { return EQ; }
"<="               { return LE; }
">="               { return GE; }
"<>"               { return NEQ; }
"<"                { return LT; }
">"                { return GT; }
"("                { return LPAREN; }
")"                { return RPAREN; }
\'([^\\\n]|(\\.))*?\'   { yylval.str = strdup(yytext); return STRING; }
{ID}               { yylval.str = strdup(yytext); return IDENTIFIER; }
{DIGIT}+           { yylval.str = strdup(yytext); return NUMBER; }
{WS}               { /* skip whitespace */ }
.                  { fprintf(stderr, "Invalid character: %s\n", yytext); return INVALID; }

%%

int yywrap(void) { return 1; }

----------------------------------------------------------------------------------------------------------------------------------------------

====================CALCULATOR=============
%{
#include "calyacc.tab.h" /* Include the correct header file */
%}

%%

[0-9]+ { yylval = atoi(yytext); return NUMBER; }
[+\-*/] { return yytext[0]; }
"(" { return '('; }
")" { return ')'; }
"\n" { return '\n'; }
[ \t] { /* Ignore whitespace */ }
. { printf("Unknown character: %s\n", yytext); }

%%

int yywrap() {
return 1;
}
//gcc calyacc.tab.h lex.yy.c -o calyacc.exe -mconsole
YACC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%{
#include <stdio.h>
#include <stdlib.h>
int yylex();
void yyerror(const char *s);
%}

/* Define operator precedence */
%left '+' '-'
%left '*' '/'
%right UMINUS /* Unary minus has the highest precedence */

%token NUMBER

%%

input:
input expression '\n' { printf("Result: %d\n", $2); }
| expression '\n' { printf("Result: %d\n", $1); }
;

expression:
expression '+' expression { $$ = $1 + $3; }
| expression '-' expression { $$ = $1 - $3; }
| expression '*' expression { $$ = $1 * $3; }
| expression '/' expression { 
if ($3 == 0) {
yyerror("Error: Division by zero");
$$ = 0;
} else {
$$ = $1 / $3;
}
}
| '-' expression %prec UMINUS { $$ = -$2; } /* Unary minus */
| '(' expression ')' { $$ = $2; }
| NUMBER { $$ = $1; }
;

%%

void yyerror(const char *s) {
fprintf(stderr, "Error: %s\n", s);
}

int main() {
printf("Enter an expression:\n");
yyparse();
return 0;
}